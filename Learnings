Precision and rounding errors:

https://stackoverflow.com/questions/54157983/python-how-to-resolve-a-rounding-error-in-a-basic-chaos-theory-program/54158093#54158093

https://stackoverflow.com/questions/21895756/why-are-floating-point-numbers-inaccurate

https://stackoverflow.com/questions/1089018/why-cant-decimal-numbers-be-represented-exactly-in-binary

-=-=-=-=-=-=-=-=-=-

Section 3.5 of Zelle

-=-=-=-=-=-=-=-=-=-

eval

a,b = 2,3 kind of assignment. a,b = b,a : swapping values

range (start, n, step)

a = (a//b)*b + (a%b)

-=-=-=-=--=-=-=--=-

Pg 94-95 of Zelle

Strings are not mutable; lists are.

-=-=-=-=-=-=-=-=-=-

Assigning a precise decimal value:

from decimal import Decimal
print(Decimal(3.14))
print(Decimal("3.14"))

-=-=--=-=-=-=-=-=-=-

Section 5.5.2, 5.7 of Zelle

-=-=-=-=-=-=-=-=-=-=

Section 6.6 of Zelle

-=-=-=-=-=-=-=-=-=-=

Section 7.1.3, 7.4, 7.5.2, 7.5.3, 7.5.5 of Zelle

-=-=-=-=-=-=-=-=-=-=

Section 8.3.3, page 253 end paragraph, page 256 first paragraph
Page 267-269 => very important

-=-=-=-=-=-=-=-=-=-=

Section 9.3, 9.4, 9.5

-=-=-=-=-=-=-=-=-=-=-

Like lists, class instances are also passed BY REFERENCE.
Any change to one of their attributes inside a function persists
outside the function as well. e.g.

class abc:
  def __init__(self, x):
    self.x = x
    
def func(abcobj):
  abcobj.x += 1
  return abcobj.x

def main():
  sample = abc(5)
  print(func(sample))
  print(sample.x)
  
main()

Section 10.5.1, 10.5.4

-=-=-=-=-=-=-=-=-=-=-

Page 369 list methods (compare pop to the del operation)
Section 11.3, page 403-409 (dictionary revision)

Note: dict.keys(), dict.values(), dict.items()

